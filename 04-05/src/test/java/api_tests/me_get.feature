# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /me_get for http method type GET 
# RoostTestHash=ae6b8ce5ab
# 
# 

# ********RoostGPT********
Feature: Account Details

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def authToken = karate.env['AUTH_TOKEN']
  * header Token = authToken

Scenario: Get account details with valid token
  Given path '/me'
  When method get
  Then status 200
  And match responseHeaders contains { 'api-version': '#string' }
  And match response == { id: '#uuid', did: '##string', email: '#regex(^(([^<>()[\\]\\\\.,;:\\s@\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$)', name: '##regex(^[\\p{L} .\'-]{1,100}$)', image: '##regex(^\\w+:(\\/?\\/?)[^\\s]+$)', settings: '#object', createdAt: '#string', updatedAt: '#string' }

Scenario: Get account details with missing or invalid token
  * header Token = ''
  Given path '/me'
  When method get
  Then status 401
  And match responseHeaders contains { 'api-version': '#string' }
  And match response == { error: '#string', description: '#string' }

Scenario: Get account details with bad request
  * header Token = authToken
  # This scenario assumes that sending an invalid parameter would result in a bad request
  Given path '/me'
  And param invalidParam = 'invalid'
  When method get
  Then status 400
  And match responseHeaders contains { 'api-version': '#string' }
  And match response anyOf { error: '#string', description: '#string' }, { error: '#regex(^validation/.*)', description: '#string', value: '#notnull', field: '#string', schema_field: '#string' }
