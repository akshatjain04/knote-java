// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Delete authorization\r\n' +
    '    Given authorization ID\r\n' +
    '    When the client sends a DELETE request to "/authorizations/ID"\r\n' +
    '    Then the response status code should be 200 for a successful delete\r\n' +
    '    And the authorizations should not appear in GET request for "/authorizations"',
  title: 'Delete authorization'
}

*/

// ********RoostGPT********
package io.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.testng.annotations.BeforeEach;
import org.testng.annotations.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import org.json.JSONObject;

public class scenario-87771cdd6d-Test {

    String baseUri = "http://localhost:8080";

    @BeforeEach
    public void setUp() throws IOException {
        RestAssured.baseUri = baseUri;
    }

    @Test
    public void testScenario() throws IOException {

        BufferedReader reader = new BufferedReader(new FileReader("src" + java.io.File.separator + "test" + java.io.File.separator + "java" + java.io.File.separator + "io" + java.io.File.separator + "learnk8s" + java.io.File.separator  + "RoostTest" + java.io.File.separator + "scenario-87771cdd6d-Test.csv"));
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.trim().length() == 0) continue;

            String[] payloads = line.split("\\^\\|\\^");

            String method = payloads[0].replace("\"", "");
            String urlPath = payloads[1].replace("\"", "");
            urlPath = urlPath.replace(baseUri, ""); // remove baseUri from urlPath
            JSONObject headers = new JSONObject(payloads[2]);
            String body = payloads[3];
            int responseCode = Integer.parseInt(payloads[4]);
            JSONObject responseBody = new JSONObject(payloads[5]);

            RequestSpecification request = RestAssured.given().headers(headers.toMap());
            Response response;
            if (method.equals("DELETE")) {
                if (urlPath.contains("{")) {
                    String[] id = urlPath.split("/");
                    urlPath = urlPath.replace("{", "").replace("}", "");
                    request.pathParam(urlPath, id[id.length - 1]);
                    urlPath = urlPath.replace(id[id.length - 1], "{" + urlPath + "}");
                }
                request = request.contentType("application/json").body(body);
                response = request.when().delete(urlPath);
            } else if (method.equals("GET")) {
                response = request.when().get(urlPath);
            } else {
                // For other request method types.
                // Continue to next iteration as the current test scenario only required GET and DELETE
                continue;
            }
            
            response.then().assertThat().statusCode(responseCode);
            for (String key : responseBody.keySet()) {
				response.then().assertThat().body(key, equalTo(responseBody.get(key)));
			}
        }
        reader.close();
    }
}
