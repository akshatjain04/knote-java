// Test generated by RoostGPT for test knote using AI Type Open AI and AI Model gpt-4

package com.learnk8s.knote.Controller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class KnoteController_uploadImage_e097a52780_Test {

    @InjectMocks
    KnoteController knoteController;

    @Mock
    KnoteProperties properties;

    Model model;

    @BeforeEach
    void setUp() {
        model = new ModelMap();
    }

    @Test
    public void testUploadImage_whenFileIsUploadedSuccessfully() throws Exception {
        MockMultipartFile file = new MockMultipartFile("file", "filename.txt", "text/plain", "some xml".getBytes());
        String description = "test";
        String uploadDir = "uploads/";
        when(properties.getUploadDir()).thenReturn(uploadDir);

        knoteController.uploadImage(file, description, model);

        assertEquals(description + " ![](/uploads/filename.txt)", model.getAttribute("description"));
    }

    @Test
    public void testUploadImage_whenFileUploadFails() throws Exception {
        MockMultipartFile file = new MockMultipartFile("file", "filename.txt", "text/plain", "some xml".getBytes());
        String description = "test";
        String uploadDir = "invalid_directory/";
        when(properties.getUploadDir()).thenReturn(uploadDir);

        try {
            knoteController.uploadImage(file, description, model);
        } catch (Exception e) {
            assertEquals("Could not upload file", e.getMessage());
        }
    }

    @Test
    public void testUploadImage_whenFileIsEmpty() throws Exception {
        MockMultipartFile file = new MockMultipartFile("file", "filename.txt", "text/plain", "".getBytes());
        String description = "test";
        String uploadDir = "uploads/";
        when(properties.getUploadDir()).thenReturn(uploadDir);

        knoteController.uploadImage(file, description, model);

        assertEquals(description + " ![](/uploads/filename.txt)", model.getAttribute("description"));
    }
}
