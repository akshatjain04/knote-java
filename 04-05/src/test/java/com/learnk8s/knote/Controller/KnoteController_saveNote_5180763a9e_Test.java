// Test generated by RoostGPT for test knote using AI Type Open AI and AI Model gpt-4

package com.learnk8s.knote.Controller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.ui.Model;
import org.springframework.validation.support.BindingAwareModelMap;

import static org.mockito.Mockito.*;

import com.learnk8s.knote.Note.Note;
import com.learnk8s.knote.Repository.NotesRepository;
import org.commonmark.node.Node;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;

public class KnoteController_saveNote_5180763a9e_Test {

    @InjectMocks
    private KnoteController knoteController;

    @Mock
    private NotesRepository notesRepository;

    @Mock
    private Parser parser;

    @Mock
    private HtmlRenderer renderer;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSaveNote_WhenDescriptionIsNotEmpty() {
        String description = "Test note";
        Model model = new BindingAwareModelMap();

        Node document = mock(Node.class);
        when(parser.parse(description.trim())).thenReturn(document);

        String html = "<p>Test note</p>";
        when(renderer.render(document)).thenReturn(html);

        knoteController.saveNote(description, model);

        verify(notesRepository, times(1)).save(new Note(null, html));
        verify(model, times(1)).addAttribute("description", "");
    }

    @Test
    public void testSaveNote_WhenDescriptionIsEmpty() {
        String description = "";
        Model model = new BindingAwareModelMap();

        knoteController.saveNote(description, model);

        verify(notesRepository, times(0)).save(any(Note.class));
        verify(model, times(0)).addAttribute(anyString(), anyString());
    }

    @Test
    public void testSaveNote_WhenDescriptionIsNull() {
        String description = null;
        Model model = new BindingAwareModelMap();

        knoteController.saveNote(description, model);

        verify(notesRepository, times(0)).save(any(Note.class));
        verify(model, times(0)).addAttribute(anyString(), anyString());
    }
}
