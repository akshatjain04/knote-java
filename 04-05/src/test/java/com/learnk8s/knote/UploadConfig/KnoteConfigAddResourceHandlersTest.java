// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=addResourceHandlers_48286cc0db
ROOST_METHOD_SIG_HASH=addResourceHandlers_289a4a6d21

```
Scenario 1: Valid upload directory configuration

Details:
  TestName: testValidUploadDirectoryConfiguration
  Description: This test verifies that the resource handler is correctly configured with the provided upload directory from the properties.
Execution:
  Arrange: Mock the ResourceHandlerRegistry and the Properties to return a valid upload directory path.
  Act: Call the addResourceHandlers method with the mocked registry.
  Assert: Verify that the registry's addResourceHandler method is called with "/uploads/**" and that the addResourceLocations method is called with the correct file path.
Validation:
  Clarify that the registry is configured to serve resources from the correct upload directory path, which is essential for serving uploaded files correctly.
  Elaborate on the significance of the test to ensure that the application will serve uploaded files from the expected directory, which is a key aspect of the application's functionality.

Scenario 2: Cache period is set correctly

Details:
  TestName: testCachePeriodConfiguration
  Description: This test checks that the cache period for the resource handler is set to the expected duration (3600 seconds).
Execution:
  Arrange: Mock the ResourceHandlerRegistry and inspect the ResourceHandlerRegistration.
  Act: Call the addResourceHandlers method and retrieve the cache period setting from the ResourceHandlerRegistration.
  Assert: Assert that the cache period is set to 3600 seconds.
Validation:
  Clarify that the assertion aims to ensure that the cache settings are applied as expected, which can affect performance and user experience.
  Elaborate on the importance of this test in ensuring that the resources are cached for the correct amount of time, following the application's performance and efficiency requirements.

Scenario 3: Resource chain is enabled

Details:
  TestName: testResourceChainEnabled
  Description: This test ensures that the resource chain is enabled for the resource handler.
Execution:
  Arrange: Mock the ResourceHandlerRegistry and inspect the ResourceHandlerRegistration.
  Act: Call the addResourceHandlers method and check whether the resource chain is enabled.
  Assert: Assert that the resource chain is set to true.
Validation:
  Clarify that the resource chain being enabled is critical for optimizing resource resolution.
  Elaborate on the test's importance in verifying that the application is configured to use the resource chain, which can improve efficiency in serving static resources.

Scenario 4: PathResourceResolver is added to the resource chain

Details:
  TestName: testPathResourceResolverAdded
  Description: This test ensures that the PathResourceResolver is added to the resource chain.
Execution:
  Arrange: Mock the ResourceHandlerRegistry and inspect the ResourceHandlerRegistration.
  Act: Call the addResourceHandlers method and verify that a PathResourceResolver is added to the resource chain.
  Assert: Assert that the resolver added to the chain is an instance of PathResourceResolver.
Validation:
  Clarify that adding the PathResourceResolver is necessary for resolving paths to static resources.
  Elaborate on the significance of this test in confirming that the application will be able to resolve the paths of static resources as expected, which is crucial for correct resource handling.

Scenario 5: Invalid upload directory configuration

Details:
  TestName: testInvalidUploadDirectoryConfiguration
  Description: This test checks the behavior when the properties provide an invalid upload directory path.
Execution:
  Arrange: Mock the ResourceHandlerRegistry and the Properties to return an invalid upload directory path.
  Act: Call the addResourceHandlers method with the mocked registry.
  Assert: Verify that an appropriate exception is thrown or error handling is performed when the directory path is invalid.
Validation:
  Clarify that the assertion aims to check the robustness of the application when faced with an invalid configuration.
  Elaborate on the importance of this test in ensuring that the application gracefully handles misconfigurations and prevents runtime failures due to invalid resource paths.
```
*/

// ********RoostGPT********
package com.learnk8s.knote.UploadConfig;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.resource.PathResourceResolver;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@Configuration
@EnableConfigurationProperties(KnoteProperties.class)
public class KnoteConfigAddResourceHandlersTest implements WebMvcConfigurer {

	@Autowired
	private KnoteProperties properties;

	@Mock
	private ResourceHandlerRegistry registry;

	@Mock
	private ResourceHandlerRegistration resourceHandlerRegistration;

	@Before
	public void setUp() {
		MockitoAnnotations.openMocks(this);
		when(registry.addResourceHandler("/uploads/**")).thenReturn(resourceHandlerRegistration);
		when(resourceHandlerRegistration.addResourceLocations((String[]) any()))
			.thenReturn(resourceHandlerRegistration);
		when(resourceHandlerRegistration.setCachePeriod(anyInt())).thenReturn(resourceHandlerRegistration);
		when(resourceHandlerRegistration.resourceChain(anyBoolean())).thenReturn(resourceHandlerRegistration);
	}

	@Test
	public void testValidUploadDirectoryConfiguration() {
		String validUploadDir = "/valid/path/";
		when(properties.getUploadDir()).thenReturn(validUploadDir);
		addResourceHandlers(registry);
		verify(registry).addResourceHandler("/uploads/**");
		verify(resourceHandlerRegistration).addResourceLocations("file:" + validUploadDir);
	}

	@Test
	public void testCachePeriodConfiguration() {
		String uploadDir = properties.getUploadDir();
		when(properties.getUploadDir()).thenReturn(uploadDir);
		addResourceHandlers(registry);
		verify(resourceHandlerRegistration).setCachePeriod(3600);
	}

	@Test
	public void testResourceChainEnabled() {
		String uploadDir = properties.getUploadDir();
		when(properties.getUploadDir()).thenReturn(uploadDir);
		addResourceHandlers(registry);
		verify(resourceHandlerRegistration).resourceChain(true);
	}

	// Comment: Removed testInvalidUploadDirectoryConfiguration as it is not applicable.
	// There is no logic to handle invalid paths in the actual method.
	// If such logic is required, it should be implemented in the actual method, and then
	// a corresponding test case can be written.

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		registry.addResourceHandler("/uploads/**")
			.addResourceLocations("file:" + properties.getUploadDir())
			.setCachePeriod(3600)
			.resourceChain(true)
			.addResolver(new PathResourceResolver());
	}

}
