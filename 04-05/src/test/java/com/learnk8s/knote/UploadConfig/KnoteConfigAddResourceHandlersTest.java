// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=addResourceHandlers_48286cc0db
ROOST_METHOD_SIG_HASH=addResourceHandlers_289a4a6d21

Scenario 1: Successful Resource Handler Registration

Details:
  TestName: ensureResourceHandlerIsAddedCorrectly
  Description: This test checks if the resource handler is successfully added with the correct path and resource location.
Execution:
  Arrange: Mock the ResourceHandlerRegistry and the KnoteProperties. Set the expected upload directory in the properties mock.
  Act: Call the addResourceHandlers method with the mocked registry.
  Assert: Verify that the registry.addResourceHandler method was called with the correct parameters ("/uploads/**") and that addResourceLocations was called with the "file:" prefix concatenated with the upload directory from the properties.
Validation:
  Clarify that the assertion aims to verify that the resource handler registration is configured properly with the correct path and location. This is important to ensure that resources are served from the expected directory and are accessible through the specified path pattern.

Scenario 2: Verify Cache Period Setting

Details:
  TestName: ensureCachePeriodIsSetCorrectly
  Description: This test ensures that the cache period for static resources is set to the specified duration.
Execution:
  Arrange: Mock the ResourceHandlerRegistry and KnoteProperties as necessary.
  Act: Call the addResourceHandlers method with the mocked registry.
  Assert: Verify that setCachePeriod was called with the value 3600.
Validation:
  Clarify that the assertion checks whether the cache period for static resources is set correctly to one hour (3600 seconds). This is significant for optimizing performance by reducing the load on the server for frequently accessed resources.

Scenario 3: Enable Resource Chain Setting

Details:
  TestName: ensureResourceChainIsEnabled
  Description: This test confirms that the resource chain is enabled for the resource handler.
Execution:
  Arrange: Mock the ResourceHandlerRegistry and KnoteProperties as needed.
  Act: Call the addResourceHandlers method with the mocked registry.
  Assert: Verify that resourceChain(true) was called to enable the resource chain.
Validation:
  The assertion aims to confirm that the resource chain is enabled, which is essential for applying a series of ResourceResolvers and ResourceTransformers that can be used to modify or serve resources in an optimized way.

Scenario 4: PathResourceResolver Addition

Details:
  TestName: ensurePathResourceResolverIsAdded
  Description: This test checks if the PathResourceResolver is added to the resource handler.
Execution:
  Arrange: Mock the ResourceHandlerRegistry and KnoteProperties.
  Act: Call the addResourceHandlers method with the mocked registry.
  Assert: Verify that addResolver was called with an instance of PathResourceResolver.
Validation:
  Clarify that the assertion verifies the addition of the PathResourceResolver, which is important for resolving resources based on the request path, ensuring that the correct resources are served to clients.

Scenario 5: Handling Null Upload Directory

Details:
  TestName: ensureHandlingOfNullUploadDirectory
  Description: This test verifies the behavior when the upload directory property is null.
Execution:
  Arrange: Mock the ResourceHandlerRegistry and create a KnoteProperties mock with a null upload directory.
  Act: Call the addResourceHandlers method with the mocked registry.
  Assert: Confirm that addResourceLocations is not called or handles the null value gracefully without throwing an exception.
Validation:
  The assertion checks the robustness of the method in handling cases where the upload directory might not be set. This is crucial to prevent runtime exceptions that could lead to service disruptions.
*/

// ********RoostGPT********
package com.learnk8s.knote.UploadConfig;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import static org.mockito.Mockito.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.resource.PathResourceResolver;

public class KnoteConfigAddResourceHandlersTest {

	private KnoteConfig knoteConfig;

	@Mock
	private ResourceHandlerRegistry registry;

	@Mock
	private ResourceHandlerRegistration registration;

	@Mock
	private KnoteProperties properties;

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
		knoteConfig = new KnoteConfig();
		knoteConfig.properties = properties;
		when(registry.addResourceHandler("/uploads/**")).thenReturn(registration);
		when(registration.addResourceLocations(anyString())).thenReturn(registration);
		when(registration.setCachePeriod(anyInt())).thenReturn(registration);
		when(registration.resourceChain(anyBoolean())).thenReturn(registration);
	}

	@Test
	public void ensureResourceHandlerIsAddedCorrectly() {
		String uploadDir = "/path/to/uploads"; // TODO: Change uploadDir to the actual
												// upload directory path
		when(properties.getUploadDir()).thenReturn(uploadDir);
		knoteConfig.addResourceHandlers(registry);
		verify(registry).addResourceHandler("/uploads/**");
		verify(registration).addResourceLocations("file:" + uploadDir);
	}

	@Test
	public void ensureCachePeriodIsSetCorrectly() {
		knoteConfig.addResourceHandlers(registry);
		verify(registration).setCachePeriod(3600);
	}

	@Test
	public void ensureResourceChainIsEnabled() {
		knoteConfig.addResourceHandlers(registry);
		verify(registration).resourceChain(true);
	}

	@Test
	public void ensurePathResourceResolverIsAdded() {
		knoteConfig.addResourceHandlers(registry);
		verify(registration).addResolver(any(PathResourceResolver.class));
	}

	@Test
    public void ensureHandlingOfNullUploadDirectory() {
        when(properties.getUploadDir()).thenReturn(null);
        knoteConfig.addResourceHandlers(registry);
        verify(registration, never()).addResourceLocations(anyString());
    }

}