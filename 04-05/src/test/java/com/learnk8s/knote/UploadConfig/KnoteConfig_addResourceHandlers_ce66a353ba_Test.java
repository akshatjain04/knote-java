// Test generated by RoostGPT for test knote using AI Type Open AI and AI Model gpt-4

package com.learnk8s.knote;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.resource.PathResourceResolver;

import static org.mockito.Mockito.*;

@EnableConfigurationProperties
public class KnoteConfig_addResourceHandlers_ce66a353ba_Test {

    @InjectMocks
    private KnoteConfig knoteConfig;

    @Mock
    private ResourceHandlerRegistry resourceHandlerRegistry;

    @Mock
    private PathResourceResolver pathResourceResolver;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testAddResourceHandlers() {
        when(resourceHandlerRegistry.addResourceHandler("/uploads/**")).thenReturn(null);
        when(pathResourceResolver.addResolver(new PathResourceResolver())).thenReturn(null);

        knoteConfig.addResourceHandlers(resourceHandlerRegistry);

        verify(resourceHandlerRegistry, times(1)).addResourceHandler("/uploads/**");
        verify(pathResourceResolver, times(1)).addResolver(new PathResourceResolver());
    }

    @Test
    public void testAddResourceHandlersFailure() {
        when(resourceHandlerRegistry.addResourceHandler("/uploads/**")).thenThrow(new RuntimeException());

        try {
            knoteConfig.addResourceHandlers(resourceHandlerRegistry);
        } catch (Exception e) {
            assertTrue(e instanceof RuntimeException);
        }

        verify(resourceHandlerRegistry, times(1)).addResourceHandler("/uploads/**");
    }
}
