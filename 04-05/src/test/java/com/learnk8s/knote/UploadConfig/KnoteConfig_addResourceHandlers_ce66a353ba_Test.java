// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Scenario: Check whether "addResourceHandlers" correctly attaches the provided handler to the registry.
   Test Case: Invoke "addResourceHandlers" with a mock "ResourceHandlerRegistry". Afterwards, probe the registry to see if the "/uploads/**" handler has been added.

2. Scenario: Validate the "addResourceLocations" is correctly setting the location to upload directory from Properties.
   Test Case: After invoking "addResourceHandlers", validate that the resource location starts with "file:" and then checks if the rest of the path matches the upload directory from Properties.

3. Scenario: Verify that the "setCachePeriod" has been set to 3600 seconds as expected.
   Test Case: After invoking "addResourceHandlers", verify that the cache period for "/uploads/**" handler is set to 3600 seconds.

4. Scenario: Confirm if the "resourceChain" function is correctly set to true.
   Test Case: After invoking "addResourceHandlers" inspect the registry's "/uploads/**" handler to see if the resolve chain is enabled.

5. Scenario: Confirm that a "PathResourceResolver" instance has been added in the "addResolver".
   Test Case: Invoke "addResourceHandlers" then examine the registry's "/uploads/**" handler to ensure a "PathResourceResolver" instance is present in the resolver chain.

6. Scenario: Validate that calling "addResourceHandlers" multiple times doesn't override previously set values.
   Test Case: Call "addResourceHandlers" twice in succession with different resource handlers and then confirm that the registry contains both handlers without any of them being overwritten or removed.  

7. Scenario: Evaluate the behavior when null "ResourceHandlerRegistry" is supplied.
   Test Case: Pass null to "addResourceHandlers". The function should throw an appropriate exception.

8. Scenario: Cross-check the behavior when "getUploadDir()" returns null or an invalid directory path. 
   Test Case: Mock "properties" to return null or an invalid path when "getUploadDir()" is called. Then examine for expected exception or error.
*/

// ********RoostGPT********
package com.learnk8s.knote;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.resource.PathResourceResolver;
import org.springframework.web.servlet.resource.ResourceChainRegistration;
import org.springframework.web.servlet.resource.ResourceHandlerRegistration;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;

public class KnoteConfig_addResourceHandlers_ce66a353ba_Test {

    @Mock
    private ResourceHandlerRegistry registry;

    @Mock
    private KnoteProperties properties;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testAddResourceHandlers() {
        when(properties.getUploadDir()).thenReturn("/path/to/upload");

        ResourceHandlerRegistration registration = new ResourceHandlerRegistration("/uploads/**");
        when(registry.addResourceHandler("/uploads/**")).thenReturn(registration);

        KnoteConfig knoteConfig = new KnoteConfig();
        knoteConfig.addResourceHandlers(registry);

        verify(registry, times(1)).addResourceHandler("/uploads/**");
        assertTrue(registration.getLocations().contains("file:/path/to/upload"));
        assertTrue(registry.hasMappingForPattern("/uploads/**"));
    }

    @Test(expected = NullPointerException.class)
    public void testAddResourceHandlersWithNullRegistry() {
        KnoteConfig knoteConfig = new KnoteConfig();
        knoteConfig.addResourceHandlers(null);
    }

    @Test
    public void testResourceChain() {
        ResourceChainRegistration resourceChainRegistration = new ResourceChainRegistration(true);
        ResourceHandlerRegistration registration = new ResourceHandlerRegistration("/uploads/**");
        registration.resourceChain(true);

        when(registry.addResourceHandler("/uploads/**")).thenReturn(registration);
        when(registration.resourceChain(true)).thenReturn(resourceChainRegistration);

        KnoteConfig knoteConfig = new KnoteConfig();
        knoteConfig.addResourceHandlers(registry);

        verify(registration, times(1)).resourceChain(true);
        assertTrue(registration.getResolvers().contains(new PathResourceResolver()));
    }
}
