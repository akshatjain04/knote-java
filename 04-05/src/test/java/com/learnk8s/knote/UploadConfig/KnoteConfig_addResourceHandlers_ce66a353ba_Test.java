// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Scenario: Validate if the ResourceHandlerRegistry registry gets updated by adding a new ResourceHandler /uploads/ with the location set to properties.getUploadDir(). 
Expected Output: After the execution of the addResourceHandlers method, the registry should have a resource handler for /uploads/ and the location should match with properties.getUploadDir().

2. Scenario: Verify if the Cache period is correctly set to 3600 seconds for the resources under /uploads/.
Expected Output: When the resource at /uploads/ is requested, the response headers must show that the cache period is set to 3600 seconds. 

3. Scenario: Check if the ResourceChain has been set to true for the /uploads/ resource handler.
Expected Output: After execution of the addResourceHandlers method, the resource chain for /uploads/ should have been enabled. 

4. Scenario: Confirm if a new instance of PathResourceResolver is added into the registry for the /uploads/ ResourceHandler.
Expected Output: After the execution of addResourceHandlers, the registry should contain the instance of PathResourceResolver associated with /uploads/ resource handler. 

5. Scenario: Validate the functionality of the addResourceHandlers method when properties.getUploadDir() return null.
Expected Output: When properties.getUploadDir() returns null, the method should handle this situation without causing any exception or error.

6. Scenario: Verify how the addResourceHandlers method behaves when a resource handler with the same path (/uploads/) already exists in the ResourceHandlerRegistry.
Expected Output: The method should suitably handle potential conflicts or situations where the mentioned resource handler already exists. The test should confirm this desired behavior.

Remember these scenarios are high-level and the implementation might differ based on the testing frame-work in use.
*/

// ********RoostGPT********
package com.learnk8s.knote;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class KnoteConfig_addResourceHandlers_ce66a353ba_Test {

    @Mock
    private KnoteProperties properties;

    @Mock
    private ResourceHandlerRegistry registry;

    @Mock
    private ResourceHandlerRegistration registration;

    @InjectMocks
    private KnoteConfig knoteConfig;

    @BeforeEach
    public void setUp() {
        when(registry.addResourceHandler("/uploads/**")).thenReturn(registration);
        when(registration.addResourceLocations(anyString())).thenReturn(registration);
        when(registration.setCachePeriod(anyInt())).thenReturn(registration);
        when(registration.resourceChain(anyBoolean())).thenReturn(registration);
    }

    @Test
    public void testAddResourceHandlers_WithValidProperties() {
        when(properties.getUploadDir()).thenReturn("uploadDir");

        knoteConfig.addResourceHandlers(registry);

        verify(registry, times(1)).addResourceHandler("/uploads/**");
        verify(registration, times(1)).addResourceLocations("file:" + properties.getUploadDir());
        verify(registration, times(1)).setCachePeriod(3600);
        verify(registration, times(1)).resourceChain(true);
        verify(registration, times(1)).addResolver(any(PathResourceResolver.class));
    }

    @Test
    public void testAddResourceHandlers_WithNullUploadDir() {
        when(properties.getUploadDir()).thenReturn(null);

        knoteConfig.addResourceHandlers(registry);

        verify(registry, times(1)).addResourceHandler("/uploads/**");
        verify(registration, times(1)).addResourceLocations("file:");
        verify(registration, times(1)).setCachePeriod(3600);
        verify(registration, times(1)).resourceChain(true);
        verify(registration, times(1)).addResolver(any(PathResourceResolver.class));
    }

    // other test scenarios are not listed because they involve testing the Spring framework itself (not possible or productive).
}
