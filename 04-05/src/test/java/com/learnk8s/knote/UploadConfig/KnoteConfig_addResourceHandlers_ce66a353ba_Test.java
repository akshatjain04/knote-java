// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

ROOST_TEST_HASH=addResourceHandlers_ac8819fe1c

Test Scenario 1: 
Test if the function allows for the addition of resource handlers correctly. This happens when the "addResourceHandlers" method is able to register the resource handler for "/uploads/**" path.

Test Scenario 2:
Test if the function correctly assigns resource locations from the file retrieved through the property "getUploadDir". This happens when the "addResourceLocations" method is being called with a file path, which is obtained from properties.getUploadDir().

Test Scenario 3:
Test if the function sets the correct cache period. This happens when the "setCachePeriod" method sets the cache period to 3600 seconds.

Test Scenario 4:
Test if the function enables the use of resource chains. This happens when the "resourceChain" method is called with the boolean parameter set as "true".

Test Scenario 5:
Test if the function adds correct resource resolver. This happens when the "addResolver" method is able to add a new PathResourceResolver object.

Test Scenario 6:
Check if the function behaves correctly when the upload directory provided by properties.getUploadDir() does not exist or is invalid.

Test Scenario 7:
Check if the function behaves correctly when the resource handler is already registered for "/uploads/**" path.

Test Scenario 8:
Check the function's behavior when file resources located at the specified path contain large amounts of data. Observe if the function continues to perform well or if response times begin to slow noticeably. 

Remember, these are test scenarios. The detailed devised test cases and test steps may vary depending upon the business requirement & system behavior.
*/

// ********RoostGPT********
package com.learnk8s.knote;

import org.junit.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.resource.PathResourceResolver;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;


public class KnoteConfig_addResourceHandlers_ce66a353ba_Test {

    @Test
    public void testAddResourceHandlers() {
        
        ResourceHandlerRegistry registry = new ResourceHandlerRegistry(null, null);
        ResourceHandlerRegistration registration = mock(ResourceHandlerRegistration.class);

        when(registry.addResourceHandler("/uploads/**")).thenReturn(registration);
        when(registration.addResourceLocations(anyString())).thenReturn(registration);
        when(registration.setCachePeriod(3600)).thenReturn(registration);
        when(registration.resourceChain(true)).thenReturn(registration);

        new KnoteConfig().addResourceHandlers(registry);

        // Verify the order of method calls
        InOrder inOrder = inOrder(registration);
        inOrder.verify(registration).addResourceHandler("/uploads/**");
        inOrder.verify(registration).addResourceLocations("file:" + properties.getUploadDir());
        inOrder.verify(registration).setCachePeriod(3600);
        inOrder.verify(registration).resourceChain(true);
        inOrder.verify(registration).addResolver(any(PathResourceResolver.class));
    }
  
    @Test(expected = Exception.class)
    public void testAddResourceHandlers_withInvalidUploadDir() {
        
        assertNotNull(properties.getUploadDir());

        ResourceHandlerRegistry registry = new ResourceHandlerRegistry(null, null);
        ResourceHandlerRegistration registration = mock(ResourceHandlerRegistration.class);

        when(registry.addResourceHandler("/uploads/**")).thenReturn(registration);
        when(registration.addResourceLocations(anyString())).thenReturn(registration);
        when(registration.setCachePeriod(3600)).thenReturn(registration);
        when(registration.resourceChain(true)).thenReturn(registration);

        KnoteConfig knoteConfig = new KnoteConfig();

        knoteConfig.setProperties(mockProperties_withInvalidUploadDir);
        knoteConfig.addResourceHandlers(registry);
    }
}
