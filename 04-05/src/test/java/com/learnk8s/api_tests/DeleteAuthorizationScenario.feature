# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# ROOST_METHOD_HASH=87771cdd6d
# ROOST_METHOD_SIG_HASH=0a68a12aee
# 
#  ########## Scenario ########## 
# 
# {
#   background: 'Given the base URL is "http://localhost:8080"',
#   rule: null,
#   scenario: 'Delete authorization\r\n' +
#     '    Given authorization ID\r\n' +
#     '    When the client sends a DELETE request to "/authorizations/ID"\r\n' +
#     '    Then the response status code should be 200 for a successful delete\r\n' +
#     '    And the authorizations should not appear in GET request for "/authorizations"',
#   title: 'Delete authorization'
# }
# 

# ********RoostGPT********
Feature: Delete authorization

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def validAuthorizationId = '123e4567-e89b-12d3-a456-426614174000'
  * def invalidAuthorizationId = 'invalid-uuid'
  * def authToken = 'valid-api-key'
  * def headers = { Token: '#(authToken)' }

Scenario: Delete an existing authorization and verify it no longer exists
  # Deleting an existing authorization
  Given path 'authorizations', validAuthorizationId
  And headers headers
  When method delete
  Then status 200
  And assert responseHeaders['api-version'][0] == '1.0.0'
  # Verifying the authorization no longer exists
  Given path 'authorizations'
  And headers headers
  When method get
  Then status 200
  And match each response.authorizations !contains { id: '#(validAuthorizationId)' }

Scenario: Attempt to delete a non-existing authorization
  # Trying to delete a non-existing authorization
  Given path 'authorizations', invalidAuthorizationId
  And headers headers
  When method delete
  Then status 400
  And assert responseHeaders['api-version'][0] == '1.0.0'

Scenario: Unauthorized deletion attempt
  # Trying to delete without authorization token
  Given path 'authorizations', validAuthorizationId
  And headers { Token: 'invalid-token' }
  When method delete
  Then status 401
  And assert responseHeaders['api-version'][0] == '1.0.0'
