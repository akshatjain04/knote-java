# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# ROOST_METHOD_HASH=c373a0cbe1
# ROOST_METHOD_SIG_HASH=da6e5a0f83
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Account Consent Setup',
#   background: 'Background:\r\n' +
#     "        * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')\r\n" +
#     '        * url urlBase\r\n' +
#     "        * def authToken = karate.properties['AUTH_TOKEN']",
#   rule: null,
#   scenario: {
#     title: 'Scenario: Unauthorized access to create account consent',
#     steps: "Given path '/aisp/account-consents'\r\n" +
#       "And header Authorization = 'Bearer invalid-token'\r\n" +
#       "And header Content-Type = 'application/json'\r\n" +
#       'And request\r\n' +
#       '            """\r\n' +
#       '            {\r\n' +
#       '                "data": {\r\n' +
#       '                    "permissions": [\r\n' +
#       '                        "ReadAccountBalance"\r\n' +
#       '                    ]\r\n' +
#       '                }\r\n' +
#       '            }\r\n' +
#       'When method POST\r\n' +
#       'Then status 401',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Account Consent Setup

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']

  Scenario: Unauthorized access to create account consent
    Given path '/aisp/account-consents'
    And header Authorization = 'Bearer invalid-token'
    And header Content-Type = 'application/json'
    And request
      """
      {
        "data": {
          "permissions": [
            "ReadAccountBalance"
          ]
        }
      }
      """
    When method post
    Then status 401
