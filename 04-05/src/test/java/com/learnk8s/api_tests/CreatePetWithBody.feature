# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# ROOST_METHOD_HASH=97abfeb813
# ROOST_METHOD_SIG_HASH=a436dd2727
# 
#  ########## Scenario ########## 
# 
# {
#   background: null,
#   rule: null,
#   scenario: 'Create pet with body\n' +
#     '    Given the API running at http://petstore.swagger.io/v2\n' +
#     '    When a POST request to /pet is made\n' +
#     '    And the request body is\n' +
#     '\n' +
#     '      """\n' +
#     '{\n' +
#     '  "name": "doggie",\n' +
#     '  "status": "available"\n' +
#     '}\n' +
#     '      """\n' +
#     '\n' +
#     '    Then a 200 response is returned within 50ms\n' +
#     '    And the response body contains\n' +
#     '    """\n' +
#     '  "id":\n' +
#     '    """',
#   title: 'Create pet with body'
# }
# 

# ********RoostGPT********
Feature: Create pet with body

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase
    * def createPetPayload = { name: '#string', status: '#string' }
    * def petResponseSchema = { id: '#number', name: '#string', status: '#string' }

  Scenario: Create a new pet with valid data
    Given path '/v2/pet'
    And header Authorization = 'Bearer {OAuth_Token}'
    And request createPetPayload
    When method post
    Then status 200
    And match response == petResponseSchema
    # Expected outcome: The API should return a 200 response with a pet object containing an id, name, and status.

  Scenario: Create a new pet with invalid data
    Given path '/v2/pet'
    And header Authorization = 'Bearer {OAuth_Token}'
    And request { name: '', status: 'invalid' }
    When method post
    Then status 405
    # Expected outcome: The API should return a 405 response indicating invalid input.
