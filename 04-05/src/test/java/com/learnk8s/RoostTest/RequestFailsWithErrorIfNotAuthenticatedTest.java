// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=f93f9c01c9
ROOST_METHOD_SIG_HASH=66e25557dd

 ########## Scenario ########## 

{
  feature: 'Feature: Credential Wallet API\r\n' +
    '  As a user of the Credential Wallet API\r\n' +
    '  I want to get registration details of people allowed to receive credentials \r\n' +
    '  So that I can manage my account effectively',
  background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: {
    title: 'Scenario: Request must fail with error if request not authenticated',
    steps: 'Given id of recipient as 09237482347 in path parameter\r\n' +
      'And size=43 and offset=22 in request query\r\n' +
      'When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
      'When authentication token is not sent in request\r\n' +
      'Then for unauthenticated request having status code 401, Verify that headers have api-version\r\n' +
      'And response body must have appropriate error schema',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class RequestFailsWithErrorIfNotAuthenticatedTest {

    private Map<String, String> testData = new HashMap<>();

    @BeforeEach
    public void setup() throws IOException {
        String path = "src" + System.getProperty("file.separator") + "test" + System.getProperty("file.separator") +
                "java" + System.getProperty("file.separator") + "com" + System.getProperty("file.separator") +
                "learnk8s" + System.getProperty("file.separator") + "RoostTest" + System.getProperty("file.separator") +
                "RequestFailsWithErrorIfNotAuthenticatedTest.csv";
        BufferedReader reader = new BufferedReader(new FileReader(path));
        String line;
        boolean isFirstLine = true;

        while ((line = reader.readLine()) != null) {
            if (isFirstLine) {
                isFirstLine = false;
                continue;
            }

            if (!line.trim().isEmpty()) {
                String[] data = line.split("\\^\\|\\^");
                testData.put("Method", data[0]);
                testData.put("URL", data[1]);
                testData.put("REQ_HEADERS", data[2]);
                testData.put("REQ_BODY", data[3]);
                testData.put("RESPONSE_CODE", data[4]);
                testData.put("RESPONSE_BODY", data[5]);
            }
        }
        reader.close();

        RestAssured.baseURI = "http://localhost:8080";
    }

    @Test
    public void requestFailsWithErrorIfNotAuthenticated() {
        // Extract data from testData for the test case
        String method = testData.get("Method");
        String url = testData.get("URL");
        int expectedStatusCode = Integer.parseInt(testData.get("RESPONSE_CODE"));
        String expectedResponseBody = testData.get("RESPONSE_BODY");

        // Perform the request and validate the response
        Response response = given()
                .contentType(ContentType.JSON)
                .when()
                .request(method, url)
                .then()
                .statusCode(expectedStatusCode)
                .body("error", is("Unauthorized"))
                .body("description", is("Authentication token not found"))
                .extract()
                .response();

        // Additional assertions
        response.then()
                .assertThat()
                .header("api-version", notNullValue());
    }
}
