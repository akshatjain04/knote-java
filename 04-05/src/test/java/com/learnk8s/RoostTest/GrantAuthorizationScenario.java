// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=803fe763f5
ROOST_METHOD_SIG_HASH=c56a467b87

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Grant authorization\r\n' +
    '    Given an existing account, create another account\r\n' +
    '    When the client sends a POST request to "/authorizations"\r\n' +
    '    Then grant access to your account and confirm access via GET request to "/authorizations"',
  title: 'Grant authorization'
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.http.Headers;
import io.restassured.response.Response;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GrantAuthorizationScenarioTest {

	private static final String PAYLOAD_FILE_PATH = "src" + FileSystems.getDefault().getSeparator() + "test"
			+ FileSystems.getDefault().getSeparator() + "java" + FileSystems.getDefault().getSeparator() + "com"
			+ FileSystems.getDefault().getSeparator() + "learnk8s" + FileSystems.getDefault().getSeparator()
			+ "RoostTest" + FileSystems.getDefault().getSeparator() + "GrantAuthorizationScenario.csv";

	private static final String DELIMITER = "\\^\\|\\^";

	private Map<String, String> apiPayloadData;

	@BeforeEach
	public void setUp() throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(PAYLOAD_FILE_PATH));
		String line;
		apiPayloadData = new HashMap<>();
		// Skip the first header line
		reader.readLine();
		while ((line = reader.readLine()) != null) {
			if (line.trim().isEmpty()) {
				continue;
			}
			String[] data = line.split(DELIMITER);
			apiPayloadData.put("METHOD", data[0]);
			apiPayloadData.put("URL", data[1]);
			apiPayloadData.put("REQ_HEADERS", data[2]);
			apiPayloadData.put("REQ_BODY", data[3]);
			apiPayloadData.put("RESPONSE_CODE", data[4]);
			apiPayloadData.put("RESPONSE_BODY", data[5]);
		}
		reader.close();
	}

	@Test
	public void testGrantAuthorization() {
		// Set the base URL
		RestAssured.baseURI = "http://localhost:8080";

		// POST request to create authorization
		String postMethod = apiPayloadData.get("METHOD");
		String postUrl = apiPayloadData.get("URL");
		Headers postHeaders = new Headers();
		JSONObject postRequestBody = new JSONObject(apiPayloadData.get("REQ_BODY"));
		int postResponseCode = Integer.parseInt(apiPayloadData.get("RESPONSE_CODE"));
		JSONObject postResponseBody = new JSONObject(apiPayloadData.get("RESPONSE_BODY"));

		Response postResponse = given().headers("Content-Type", ContentType.JSON, "Accept", ContentType.JSON)
			.body(postRequestBody.toString())
			.when()
			.request(postMethod, postUrl)
			.then()
			.statusCode(postResponseCode)
			.body("id", equalTo(postResponseBody.getString("id")))
			.body("email", equalTo(postResponseBody.getString("email")))
			.body("createdAt", equalTo(postResponseBody.getString("createdAt")))
			.body("updatedAt", equalTo(postResponseBody.getString("updatedAt")))
			.extract()
			.response();

		// GET request to confirm access
		String getMethod = apiPayloadData.get("METHOD");
		String getUrl = apiPayloadData.get("URL");
		Headers getHeaders = new Headers();
		int getResponseCode = Integer.parseInt(apiPayloadData.get("RESPONSE_CODE"));
		JSONObject getResponseBody = new JSONObject(apiPayloadData.get("RESPONSE_BODY"));

		given().headers("Content-Type", ContentType.JSON, "Accept", ContentType.JSON)
			.when()
			.request(getMethod, getUrl)
			.then()
			.statusCode(getResponseCode)
			.body("total", equalTo(getResponseBody.getInt("total")))
			.body("authorizations.id",
					hasItem(getResponseBody.getJSONArray("authorizations").getJSONObject(0).getString("id")))
			.body("authorizations.email",
					hasItem(getResponseBody.getJSONArray("authorizations").getJSONObject(0).getString("email")))
			.body("authorizations.createdAt",
					hasItem(getResponseBody.getJSONArray("authorizations").getJSONObject(0).getString("createdAt")))
			.body("authorizations.updatedAt",
					hasItem(getResponseBody.getJSONArray("authorizations").getJSONObject(0).getString("updatedAt")));
	}

}
