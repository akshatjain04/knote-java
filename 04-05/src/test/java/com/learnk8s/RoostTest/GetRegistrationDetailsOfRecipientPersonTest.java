// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=d4875ba7c9
ROOST_METHOD_SIG_HASH=deac2363dc

 ########## Scenario ########## 

{
  feature: 'Feature: Credential Wallet API\r\n' +
    '  As a user of the Credential Wallet API\r\n' +
    '  I want to get registration details of people allowed to receive credentials \r\n' +
    '  So that I can manage my account effectively',
  background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: {
    title: 'Scenario: Get Registration Details Of Recipient Person',
    steps: 'Given id of recipient as 27364922937 in path parameter\r\n' +
      'And size=13 and offset=42 in request query\r\n' +
      'When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
      'When authentication token is sent in request\r\n' +
      'Then for successful request having status code 200, Verify that headers have api-version, page-size and  page-offset\r\n' +
      'And response body must have element registrations and total.',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetRegistrationDetailsOfRecipientPersonTest {

    private static final String DATA_FILE = "src" + FileSystems.getDefault().getSeparator() +
            "test" + FileSystems.getDefault().getSeparator() +
            "java" + FileSystems.getDefault().get.separator() +
            "com" + FileSystems.getDefault().getSeparator() +
            "learnk8s" + FileSystems.getDefault().getSeparator() +
            "RoostTest" + FileSystems.getDefault().getSeparator() +
            "GetRegistrationDetailsOfRecipientPersonTest.csv";
    private Map<String, String> testData;

    @BeforeEach
    public void setUp() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(DATA_FILE));
        String line = reader.readLine(); // Skip headers
        testData = new HashMap<>();
        while ((line = reader.readLine()) != null) {
            if (!line.trim().isEmpty()) {
                String[] data = line.split("\\^\\|\\^");
                testData.put("Method", data[0]);
                testData.put("URL", data[1]);
                testData.put("REQ_HEADERS", data[2]);
                testData.put("REQ_BODY", data[3]);
                testData.put("RESPONSE_CODE", data[4]);
                testData.put("RESPONSE_BODY", data[5]);
                break; // Assuming we are testing one API at a time
            }
        }
        reader.close();
    }

    @Test
    public void getRegistrationDetailsOfRecipientPersonTest() {
        // Extracting details from the testData map
        String method = testData.get("Method");
        String url = testData.get("URL");
        String reqHeaders = testData.get("REQ_HEADERS");
        String reqBody = testData.get("REQ_BODY");
        int responseCode = Integer.parseInt(testData.get("RESPONSE_CODE"));
        String responseBody = testData.get("RESPONSE_BODY");

        // Parsing headers
        Map<String, String> headers = new HashMap<>();
        if (!reqHeaders.isEmpty()) {
            headers = parseJson(reqHeaders);
        }

        // Parsing body
        if (!reqBody.isEmpty()) {
            // If body is needed, parse it here
        }

        // Perform the test
        Response response = given()
                .headers(headers)
                .when()
                .request(method, url)
                .then()
                .statusCode(responseCode)
                .contentType(ContentType.JSON)
                .and()
                .extract().response();

        // Validate response headers
        response.then().assertThat()
                .headers("api-version", notNullValue(),
                        "page-size", notNullValue(),
                        "page-offset", notNullValue());

        // Validate response body
        response.then().assertThat()
                .body("total", notNullValue(),
                        "registrations", hasSize(greaterThanOrEqualTo(0)))
                .and()
                .body("registrations.id", everyItem(notNullValue()),
                        "registrations.startDate", everyItem(notNullValue()),
                        "registrations.status", everyItem(notNullValue()),
                        "registrations.credentialUrl", everyItem(notNullValue()),
                        "registrations.createdAt", everyItem(notNullValue()),
                        "registrations.updatedAt", everyItem(notNullValue()));
    }

    private Map<String, String> parseJson(String json) {
        // Placeholder for JSON parsing logic
        // This should return a Map<String, String> after parsing the JSON string
        return new HashMap<>();
    }
}
