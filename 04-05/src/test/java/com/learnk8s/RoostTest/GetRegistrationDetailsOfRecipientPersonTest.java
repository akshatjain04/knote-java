// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=a991089179
ROOST_METHOD_SIG_HASH=5a667c5d20

 ########## Scenario ########## 

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get Registration Details Of Recipient Person\r\n' +
    '    Given id of recipient as 27364922937 in path parameter\r\n' +
    '    And size=13 and offset=42 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is sent in request\r\n' +
    '    Then for successful request having status code 200, Verify that headers have api-version, page-size and  page-offset\r\n' +
    '    And response body must have element registrations and total.',
  title: 'Get Registration Details Of Recipient Person'
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetRegistrationDetailsOfRecipientPersonTest {

    private final String payloadFilePath = "src" + FileSystems.getDefault().getSeparator() +
            "test" + FileSystems.getDefault().getSeparator() +
            "java" + FileSystems.getDefault().getSeparator() +
            "com" + FileSystems.getDefault().getSeparator() +
            "learnk8s" + FileSystems.getDefault().getSeparator() +
            "RoostTest" + FileSystems.getDefault().getSeparator() +
            "GetRegistrationDetailsOfRecipientPersonTest.csv";
    private Map<String, String> testData;

    @BeforeEach
    public void setup() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(payloadFilePath));
        String line = reader.readLine(); // Skip the header line
        testData = new HashMap<>();
        while ((line = reader.readLine()) != null) {
            if (line.trim().isEmpty()) continue;
            String[] parts = line.split("\\^\\|\\^");
            testData.put("Method", parts[0]);
            testData.put("URL", parts[1]);
            testData.put("REQ_HEADERS", parts[2]);
            testData.put("REQ_BODY", parts[3]);
            testData.put("RESPONSE_CODE", parts[4]);
            testData.put("RESPONSE_BODY", parts[5]);
            break; // Assuming one set of data for this test
        }
        reader.close();
    }

    @Test
    public void testGetRegistrationDetailsOfRecipientPerson() {
        // Extract the data for the test
        String method = testData.get("Method");
        String url = testData.get("URL");
        Map<String, String> headers = new HashMap<>();
        // Assuming headers are in JSON format
        headers = io.restassured.path.json.JsonPath.from(testData.get("REQ_HEADERS")).get();
        int expectedStatusCode = Integer.parseInt(testData.get("RESPONSE_CODE"));

        // Perform the API call and assert the response
        Response response = given()
                .headers(headers)
                .when()
                .request(method, url)
                .then()
                .assertThat()
                .statusCode(expectedStatusCode)
                .and()
                .contentType(ContentType.JSON)
                .and()
                .body("total", instanceOf(Integer.class))
                .body("registrations", instanceOf(Map[].class))
                .extract()
                .response();

        // Assert the headers
        response.then().assertThat()
                .header("api-version", equalTo(headers.get("api-version")))
                .header("page-size", equalTo(headers.get("page-size")))
                .header("page-offset", equalTo(headers.get("page-offset")));

        // Assert the response body
        response.then().assertThat()
                .body("registrations.id", everyItem(instanceOf(String.class)))
                .body("registrations.reference", everyItem(anyOf(nullValue(), instanceOf(String.class))))
                .body("registrations.startDate", everyItem(instanceOf(String.class)))
                .body("registrations.endDate", everyItem(anyOf(nullValue(), instanceOf(String.class))))
                .body("registrations.status", everyItem(instanceOf(String.class)))
                .body("registrations.credentialUrl", everyItem(instanceOf(String.class)))
                .body("registrations.suspendedUntil", everyItem(anyOf(nullValue(), instanceOf(String.class))))
                .body("registrations.issuedAt", everyItem(anyOf(nullValue(), instanceOf(String.class))))
                .body("registrations.createdAt", everyItem(instanceOf(String.class)))
                .body("registrations.updatedAt", everyItem(instanceOf(String.class)));
    }
}
