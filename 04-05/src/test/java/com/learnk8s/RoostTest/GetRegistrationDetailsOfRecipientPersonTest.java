// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=a991089179
ROOST_METHOD_SIG_HASH=5a667c5d20

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get Registration Details Of Recipient Person\r\n' +
    '    Given id of recipient as 27364922937 in path parameter\r\n' +
    '    And size=13 and offset=42 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is sent in request\r\n' +
    '    Then for successful request having status code 200, Verify that headers have api-version, page-size and  page-offset\r\n' +
    '    And response body must have element registrations and total.',
  title: 'Get Registration Details Of Recipient Person'
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetRegistrationDetailsOfRecipientPersonTest {

	private static final String CSV_FILE_PATH = "src" + FileSystems.getDefault().getSeparator() + "test"
			+ FileSystems.getDefault().getSeparator() + "java" + FileSystems.getDefault().getSeparator() + "com"
			+ FileSystems.getDefault().getSeparator() + "learnk8s" + FileSystems.getDefault().getSeparator()
			+ "RoostTest" + FileSystems.getDefault().getSeparator() + "GetRegistrationDetailsOfRecipientPersonTest.csv";

	private static final String DELIMITER = "\\^\\|\\^";

	private BufferedReader reader;

	@BeforeEach
	public void setup() throws IOException {
		reader = new BufferedReader(new FileReader(CSV_FILE_PATH));
		// Skip the header row
		reader.readLine();
	}

	@Test
	public void getRegistrationDetailsOfRecipientPerson() throws IOException {
		String line;
		while ((line = reader.readLine()) != null) {
			if (line.trim().isEmpty())
				continue;

			String[] data = line.split(DELIMITER);

			String method = data[0];
			String url = data[1];
			Map<String, String> headers = new HashMap<>();
			// Assuming headers are in JSON format, parse them accordingly
			headers = new org.json.JSONObject(data[2]).toMap();
			// REQ_BODY is not used in GET request
			int expectedStatusCode = Integer.parseInt(data[4]);
			String expectedResponseBody = data[5];

			// Perform the test
			RestAssured.baseURI = "http://localhost:8080";

			Response response = given().headers(headers)
				.when()
				.get(url)
				.then()
				.contentType(ContentType.JSON)
				.statusCode(expectedStatusCode)
				.body("total", isA(Integer.class))
				.body("registrations", isA(java.util.List.class))
				.extract()
				.response();

			// Response body assertions
			if (!expectedResponseBody.isEmpty()) {
				Map<String, Object> expectedResponse = new org.json.JSONObject(expectedResponseBody).toMap();
				for (Map.Entry<String, Object> entry : expectedResponse.entrySet()) {
					response.then().body(entry.getKey(), equalTo(entry.getValue()));
				}
			}

			// Header assertions
			response.then()
				.headers("api-version", headers.get("api-version"), "page-size",
						Integer.parseInt(headers.get("page-size")), "page-offset",
						Integer.parseInt(headers.get("page-offset")));
		}
		reader.close();
	}

}
