// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=a991089179
ROOST_METHOD_SIG_HASH=5a667c5d20

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get Registration Details Of Recipient Person\r\n' +
    '    Given id of recipient as 27364922937 in path parameter\r\n' +
    '    And size=13 and offset=42 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is sent in request\r\n' +
    '    Then for successful request having status code 200, Verify that headers have api-version, page-size and  page-offset\r\n' +
    '    And response body must have element registrations and total.',
  title: 'Get Registration Details Of Recipient Person'
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetRegistrationDetailsOfRecipientPersonTest {

	private Map<String, String> headersMap;

	private Map<String, Object> paramsMap;

	@BeforeEach
	public void setUp() throws IOException {
		String path = "src" + FileSystems.getDefault().getSeparator() + "test" + FileSystems.getDefault().getSeparator()
				+ "java" + FileSystems.getDefault().getSeparator() + "com" + FileSystems.getDefault().getSeparator()
				+ "learnk8s" + FileSystems.getDefault().getSeparator() + "RoostTest"
				+ FileSystems.getDefault().getSeparator() + "GetRegistrationDetailsOfRecipientPersonTest.csv";
		BufferedReader reader = new BufferedReader(new FileReader(path));
		String line;
		while ((line = reader.readLine()) != null) {
			if (line.trim().isEmpty())
				continue;
			// Split using the delimiter
			String[] data = line.split("\\^\\|\\^");
			if (data[0].equals("METHOD"))
				continue; // Skip headers

			String method = data[0];
			String url = data[1];
			String reqHeaders = data[2];
			String reqBody = data[3];
			int responseCode = Integer.parseInt(data[4]);
			String responseBody = data[5];

			// Parse headers and parameters
			headersMap = parseJsonToMap(reqHeaders);
			paramsMap = parseJsonToMap(reqBody);
			// Perform the test with the parsed data
			performTest(method, url, headersMap, paramsMap, responseCode, responseBody);
		}
		reader.close();
	}

	private void performTest(String method, String url, Map<String, String> headers, Map<String, Object> params,
			int responseCode, String responseBody) {
		RequestSpecification request = RestAssured.given();
		request.headers(headers);
		request.params(params);

		Response response = request.request(method, url);
		response.then().statusCode(responseCode).body(equalTo(responseBody));
	}

	private Map<String, String> parseJsonToMap(String jsonString) {
		// This method is a placeholder for the actual JSON parsing logic
		Map<String, String> map = new HashMap<>();
		// Implementation of JSON parsing
		return map;
	}

	@Test
	public void testGetRegistrationDetailsOfRecipientPerson() {
		// Given id of recipient as 27364922937 in path parameter
		// And size=13 and offset=42 in request query
		// When the client sends a GET request to endpoint
		// "/recipients/persons/{id}/registrations"
		// When authentication token is sent in request
		// Then for successful request having status code 200, Verify that headers have
		// api-version, page-size and page-offset
		// And response body must have element registrations and total.

		RestAssured.baseURI = "http://localhost:8080";

		given().pathParam("id", "27364922937")
			.queryParam("size", 13)
			.queryParam("offset", 42)
			.headers(headersMap)
			.when()
			.get("/recipients/persons/{id}/registrations")
			.then()
			.statusCode(200)
			.headers("api-version", notNullValue(), "page-size", notNullValue(), "page-offset", notNullValue())
			.body("total", notNullValue(), "registrations", hasSize(greaterThanOrEqualTo(0)))
			.body("registrations.id", everyItem(notNullValue()), "registrations.startDate", everyItem(notNullValue()),
					"registrations.status", everyItem(notNullValue()), "registrations.credentialUrl",
					everyItem(notNullValue()), "registrations.createdAt", everyItem(notNullValue()),
					"registrations.updatedAt", everyItem(notNullValue()));
	}

}
