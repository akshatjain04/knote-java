// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=a991089179
ROOST_METHOD_SIG_HASH=5a667c5d20

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get Registration Details Of Recipient Person\r\n' +
    '    Given id of recipient as 27364922937 in path parameter\r\n' +
    '    And size=13 and offset=42 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is sent in request\r\n' +
    '    Then for successful request having status code 200, Verify that headers have api-version, page-size and  page-offset\r\n' +
    '    And response body must have element registrations and total.',
  title: 'Get Registration Details Of Recipient Person'
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetRegistrationDetailsOfRecipientPersonTest {

	private static final String DATA_FILE = "src" + FileSystems.getDefault().getSeparator() + "test"
			+ FileSystems.getDefault().getSeparator() + "java" + FileSystems.getDefault().getSeparator() + "com"
			+ FileSystems.getDefault().getSeparator() + "learnk8s" + FileSystems.getDefault().getSeparator()
			+ "RoostTest" + FileSystems.getDefault().getSeparator() + "GetRegistrationDetailsOfRecipientPersonTest.csv";

	private Map<String, String> testData;

	@BeforeEach
	public void setUp() throws IOException {
		testData = new HashMap<>();
		BufferedReader reader = new BufferedReader(new FileReader(DATA_FILE));
		String headersLine = reader.readLine(); // skip headers
		String line;
		while ((line = reader.readLine()) != null) {
			if (!line.trim().isEmpty()) {
				String[] data = line.split("\\^\\|\\^");
				testData.put("Method", data[0]);
				testData.put("URL", data[1]);
				testData.put("REQ_HEADERS", data[2]);
				testData.put("REQ_BODY", data[3]);
				testData.put("RESPONSE_CODE", data[4]);
				testData.put("RESPONSE_BODY", data[5]);
				break;
			}
		}
		reader.close();
	}

	@Test
	public void testGetRegistrationDetailsOfRecipientPerson() {
		// Extract details from the testData map
		String method = testData.get("Method");
		String url = testData.get("URL");
		String reqHeaders = testData.get("REQ_HEADERS");
		String reqBody = testData.get("REQ_BODY");
		int responseCode = Integer.parseInt(testData.get("RESPONSE_CODE"));
		String responseBody = testData.get("RESPONSE_BODY");

		// Parse headers JSON
		Map<String, Object> headers = new HashMap<>();
		if (!reqHeaders.isEmpty()) {
			headers = io.restassured.path.json.JsonPath.from(reqHeaders).get();
		}

		// Perform the test
		Response response = given().headers(headers)
			.when()
			.request(method, url)
			.then()
			.contentType(ContentType.JSON)
			.statusCode(responseCode)
			.extract()
			.response();

		// Assert response body
		response.then()
			.body("total", equalTo(io.restassured.path.json.JsonPath.from(responseBody).get("total")))
			.body("registrations", equalTo(io.restassured.path.json.JsonPath.from(responseBody).get("registrations")));

		// Assert headers
		response.then()
			.header("api-version", notNullValue())
			.header("page-size", notNullValue())
			.header("page-offset", notNullValue());
	}

}
