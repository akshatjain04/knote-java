// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=a991089179
ROOST_METHOD_SIG_HASH=5a667c5d20

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get Registration Details Of Recipient Person\r\n' +
    '    Given id of recipient as 27364922937 in path parameter\r\n' +
    '    And size=13 and offset=42 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is sent in request\r\n' +
    '    Then for successful request having status code 200, Verify that headers have api-version, page-size and  page-offset\r\n' +
    '    And response body must have element registrations and total.',
  title: 'Get Registration Details Of Recipient Person'
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetRegistrationDetailsOfRecipientPersonTest {

	private static final String DATA_FILE_PATH = "src" + System.getProperty("file.separator") + "test"
			+ System.getProperty("file.separator") + "java" + System.getProperty("file.separator") + "com"
			+ System.getProperty("file.separator") + "learnk8s" + System.getProperty("file.separator") + "RoostTest"
			+ System.getProperty("file.separator") + "GetRegistrationDetailsOfRecipientPersonTest.csv";

	private static final String DELIMITER = "\\^\\|\\^";

	private Map<String, String> testData;

	@BeforeEach
	public void setUp() throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(DATA_FILE_PATH));
		String line = reader.readLine(); // Skip headers
		testData = new HashMap<>();

		while ((line = reader.readLine()) != null) {
			if (!line.trim().isEmpty()) {
				String[] data = line.split(DELIMITER);
				testData.put("Method", data[0]);
				testData.put("URL", data[1]);
				testData.put("REQ_HEADERS", data[2]);
				testData.put("REQ_BODY", data[3]);
				testData.put("RESPONSE_CODE", data[4]);
				testData.put("RESPONSE_BODY", data[5]);
				break; // Assuming one set of data for one test case
			}
		}
		reader.close();
	}

	@Test
	public void testGetRegistrationDetailsOfRecipientPerson() {
		// Extracting data for the test case
		String method = testData.get("Method");
		String url = testData.get("URL");
		Map headers = new HashMap<>(Map.of(testData.get("REQ_HEADERS").split(":")));
		int expectedStatusCode = Integer.parseInt(testData.get("RESPONSE_CODE"));
		String expectedResponseBody = testData.get("RESPONSE_BODY");

		// Set the base URL
		RestAssured.baseURI = "http://localhost:8080";

		// Perform the GET request and validate the response
		Response response = given().headers(headers)
			.when()
			.get(url)
			.then()
			.statusCode(expectedStatusCode)
			.contentType(ContentType.JSON)
			.body("total", isA(Integer.class))
			.body("registrations", isA(java.util.List.class))
			.body("registrations.size()", is(greaterThanOrEqualTo(0)))
			.body("registrations.id", everyItem(isA(String.class)))
			.body("registrations.reference", everyItem(anyOf(isA(String.class), is(nullValue()))))
			.body("registrations.startDate", everyItem(isA(String.class)))
			.body("registrations.endDate", everyItem(anyOf(isA(String.class), is(nullValue()))))
			.body("registrations.status", everyItem(isA(String.class)))
			.body("registrations.credentialUrl", everyItem(isA(String.class)))
			.body("registrations.suspendedUntil", everyItem(anyOf(isA(String.class), is(nullValue()))))
			.body("registrations.issuedAt", everyItem(anyOf(isA(String.class), is(nullValue()))))
			.body("registrations.createdAt", everyItem(isA(String.class)))
			.body("registrations.updatedAt", everyItem(isA(String.class)))
			.extract()
			.response();

		// Additional validations for headers if required
		Map<String, String> responseHeaders = response.getHeaders()
			.asList()
			.stream()
			.collect(HashMap::new, (m, h) -> m.put(h.getName(), h.getValue()), HashMap::putAll);
		assertThat(responseHeaders, hasKey("api-version"));
		assertThat(responseHeaders, hasKey("page-size"));
		assertThat(responseHeaders, hasKey("page-offset"));
	}

}
