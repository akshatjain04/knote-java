// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=74700598a7
ROOST_METHOD_SIG_HASH=deac2363dc

 ########## Scenario ########## 

{
  feature: 'Feature: Credential Wallet API\r\n' +
    '  As a user of the Credential Wallet API\r\n' +
    '  I want to get registration details of people allowed to receive credentials \r\n' +
    '  So that I can manage my account effectively',
  background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: {
    title: 'Scenario: Get Registration Details Of Recipient Person',
    steps: 'Given id of recipient as 27364922937 in path parameter\r\n' +
      'And size=13 and offset=42 in request query\r\n' +
      'When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
      'When authentication token is sent in request\r\n' +
      'Then for successful request having status code 200, Verify that headers have api-version, page-size and  page-offset\r',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetRegistrationDetailsOfRecipientPersonTest {

    private static final String DATA_FILE = "src" + FileSystems.getDefault().getSeparator() +
            "test" + FileSystems.getDefault().getSeparator() +
            "java" + FileSystems.getDefault().getSeparator() +
            "com" + FileSystems.getDefault().getSeparator() +
            "learnk8s" + FileSystems.getDefault().getSeparator() +
            "RoostTest" + FileSystems.getDefault().getSeparator() +
            "GetRegistrationDetailsOfRecipientPersonTest.csv";
    private BufferedReader reader;
    private String currentLine;

    @BeforeEach
    public void setUp() throws IOException {
        reader = new BufferedReader(new FileReader(DATA_FILE));
        // Skip the header
        reader.readLine();
        currentLine = reader.readLine();
    }

    @Test
    public void getRegistrationDetailsOfRecipientPerson() throws IOException {
        while (currentLine != null && !currentLine.trim().isEmpty()) {
            String[] data = currentLine.split("\\^\\|\\^");

            String method = data[0];
            String url = data[1];
            Map<String, String> headers = parseHeaders(data[2]);
            String requestBody = data[3]; // In this case, it should be ignored as the method is GET
            int responseCode = Integer.parseInt(data[4]);
            Map<String, Object> responseBody = parseResponseBody(data[5]);

            RequestSpecification request = given().headers(headers);

            // Perform the API call and validate the response
            Response response = request.when().get(url);

            response.then().log().all()
                    .statusCode(responseCode)
                    .body("api-version", is(responseBody.get("api-version")))
                    .body("page-size", is(responseBody.get("page-size")))
                    .body("page-offset", is(responseBody.get("page-offset")))
                    .body("total", is(responseBody.get("total")))
                    .body("registrations", is(responseBody.get("registrations")));

            // Read next line for next test
            currentLine = reader.readLine();
        }
        reader.close();
    }

    private Map<String, String> parseHeaders(String headersJson) {
        // Assuming headersJson is a valid JSON string
        return new HashMap<>(); // Replace with actual JSON parsing
    }

    private Map<String, Object> parseResponseBody(String responseBodyJson) {
        // Assuming responseBodyJson is a valid JSON string
        return new HashMap<>(); // Replace with actual JSON parsing
    }
}
