// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=12ece3c33e
ROOST_METHOD_SIG_HASH=acd4a6d263

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Request must fail with error if request not authenticated\r\n' +
    '    Given id of recipient as 09237482347 in path parameter\r\n' +
    '    And size=43 and offset=22 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is not sent in request\r\n' +
    '    Then for unauthenticated request having status code 401, Verify that headers have api-version\r\n' +
    '    And response body must have appropriate error schema',
  title: 'Request must fail with error if request not authenticated'
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class RequestFailIfNotAuthenticatedTest {

	private Map<String, String> testData = new HashMap<>();

	@BeforeEach
	public void setUp() throws IOException {
		String path = "src" + FileSystems.getDefault().getSeparator() + "test" + FileSystems.getDefault().getSeparator()
				+ "java" + FileSystems.getDefault().getSeparator() + "com" + FileSystems.getDefault().getSeparator()
				+ "learnk8s" + FileSystems.getDefault().getSeparator() + "RoostTest"
				+ FileSystems.getDefault().getSeparator() + "RequestFailIfNotAuthenticatedTest.csv";
		BufferedReader reader = new BufferedReader(new FileReader(path));
		String line;
		boolean isFirstLine = true;
		while ((line = reader.readLine()) != null) {
			if (isFirstLine) {
				isFirstLine = false;
				continue;
			}
			if (line.trim().isEmpty())
				continue;
			String[] values = line.split("\\^\\|\\^");
			testData.put("Method", values[0]);
			testData.put("URL", values[1]);
			testData.put("REQ_HEADERS", values[2]);
			testData.put("REQ_BODY", values[3]);
			testData.put("RESPONSE_CODE", values[4]);
			testData.put("RESPONSE_BODY", values[5]);
		}
		reader.close();
	}

	@Test
	public void testRequestMustFailIfNotAuthenticated() {
		// Extracting test data from the setup method
		String method = testData.get("Method");
		String url = testData.get("URL");
		String reqHeaders = testData.get("REQ_HEADERS");
		String reqBody = testData.get("REQ_BODY");
		int responseCode = Integer.parseInt(testData.get("RESPONSE_CODE"));
		String responseBody = testData.get("RESPONSE_BODY");

		// Perform the test
		Response response = given().contentType(ContentType.JSON)
			.when()
			.request(method, url)
			.then()
			.statusCode(responseCode)
			.assertThat()
			.header("api-version", notNullValue())
			.body(equalTo(responseBody))
			.extract()
			.response();

		// Validate the response body
		Map<String, Object> responseMap = response.jsonPath().getMap("$");
		assertThat(responseMap, hasKey("error"));
		assertThat(responseMap, hasKey("description"));
	}

}
