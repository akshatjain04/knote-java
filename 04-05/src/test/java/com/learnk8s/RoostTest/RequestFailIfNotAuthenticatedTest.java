// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=12ece3c33e
ROOST_METHOD_SIG_HASH=acd4a6d263

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Request must fail with error if request not authenticated\r\n' +
    '    Given id of recipient as 09237482347 in path parameter\r\n' +
    '    And size=43 and offset=22 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is not sent in request\r\n' +
    '    Then for unauthenticated request having status code 401, Verify that headers have api-version\r\n' +
    '    And response body must have appropriate error schema',
  title: 'Request must fail with error if request not authenticated'
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class RequestFailIfNotAuthenticatedTest {

	private static final String CSV_FILE = "src" + System.getProperty("file.separator") + "test"
			+ System.getProperty("file.separator") + "java" + System.getProperty("file.separator") + "com"
			+ System.getProperty("file.separator") + "learnk8s" + System.getProperty("file.separator") + "RoostTest"
			+ System.getProperty("file.separator") + "RequestFailIfNotAuthenticatedTest.csv";

	private Map<String, String> testData;

	@BeforeEach
	public void setUp() throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE));
		String line;
		testData = new HashMap<>();
		reader.readLine(); // skip header
		while ((line = reader.readLine()) != null) {
			if (!line.trim().isEmpty()) {
				String[] data = line.split("\\^\\|\\^");
				testData.put("METHOD", data[0]);
				testData.put("URL", data[1]);
				testData.put("REQ_HEADERS", data[2]);
				testData.put("REQ_BODY", data[3]);
				testData.put("RESPONSE_CODE", data[4]);
				testData.put("RESPONSE_BODY", data[5]);
				break;
			}
		}
		reader.close();
	}

	@Test
	public void testRequestMustFailWith401IfNotAuthenticated() {
		// Extracting the test data for the scenario
		String method = testData.get("METHOD");
		String url = testData.get("URL");
		String responseCode = testData.get("RESPONSE_CODE");
		String responseBody = testData.get("RESPONSE_BODY");

		// Setting base URI before starting the test
		RestAssured.baseURI = "http://localhost:8080";

		// Creating a request specification
		RequestSpecification httpRequest = given();

		// Executing the request and capturing the response
		Response response = httpRequest.request(method, url);

		// Asserting the response status code and response body
		response.then()
			.statusCode(Integer.parseInt(responseCode))
			.body("error", equalTo("unauthenticated"))
			.body("description", equalTo("Authentication token is missing"))
			.header("api-version", notNullValue());

		// Additional nested assertions for response headers
		// Note: The actual values for the headers are not provided, so we check for not
		// null values
		response.then().assertThat().header("api-version", notNullValue());
	}

}
