// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=12ece3c33e
ROOST_METHOD_SIG_HASH=acd4a6d263

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Request must fail with error if request not authenticated\r\n' +
    '    Given id of recipient as 09237482347 in path parameter\r\n' +
    '    And size=43 and offset=22 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is not sent in request\r\n' +
    '    Then for unauthenticated request having status code 401, Verify that headers have api-version\r\n' +
    '    And response body must have appropriate error schema',
  title: 'Request must fail with error if request not authenticated'
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.Matchers.*;

public class RequestFailIfNotAuthenticatedTest {

	private static final String DATA_FILE = Paths
		.get("src", "test", "java", "com", "learnk8s", "RoostTest", "RequestFailIfNotAuthenticatedTest.csv")
		.toString();

	private Map<String, String> apiDetails;

	@BeforeEach
	public void setup() throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(DATA_FILE));
		String line;
		apiDetails = new HashMap<>();
		reader.readLine(); // Skip headers
		while ((line = reader.readLine()) != null) {
			if (line.isEmpty())
				continue;
			String[] details = line.split("\\^\\|\\^");
			apiDetails.put("METHOD", details[0]);
			apiDetails.put("URL", details[1]);
			apiDetails.put("REQ_HEADERS", details[2]);
			apiDetails.put("REQ_BODY", details[3]);
			apiDetails.put("RESPONSE_CODE", details[4]);
			apiDetails.put("RESPONSE_BODY", details[5]);
		}
		reader.close();
	}

	@Test
	public void testRequestFailIfNotAuthenticated() {
		// Given id of recipient as 09237482347 in path parameter
		// And size=43 and offset=22 in request query
		// When the client sends a GET request to endpoint
		// "/recipients/persons/{id}/registrations"
		// When authentication token is not sent in request
		// Then for unauthenticated request having status code 401, Verify that headers
		// have api-version
		// And response body must have appropriate error schema

		// Setup the base URL
		RestAssured.baseURI = "http://localhost:8080";

		// Create request specification
		RequestSpecification request = RestAssured.given();

		// Define path and query parameters
		String endpoint = apiDetails.get("URL").replace("{id}", "09237482347");
		request.queryParam("size", "43");
		request.queryParam("offset", "22");

		// Send the request without authentication token
		Response response = request.get(endpoint);

		// Assert that the response status code is 401
		response.then().statusCode(Integer.parseInt(apiDetails.get("RESPONSE_CODE")));

		// Assert that the response body has an error schema
		response.then().body("error", equalTo("Unauthenticated"));
		response.then().body("description", equalTo("Authentication token is missing"));

		// Assert that the headers have api-version
		response.then().headers("api-version", notNullValue());
	}

}
