// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=12ece3c33e
ROOST_METHOD_SIG_HASH=acd4a6d263

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Request must fail with error if request not authenticated\r\n' +
    '    Given id of recipient as 09237482347 in path parameter\r\n' +
    '    And size=43 and offset=22 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is not sent in request\r\n' +
    '    Then for unauthenticated request having status code 401, Verify that headers have api-version\r\n' +
    '    And response body must have appropriate error schema',
  title: 'Request must fail with error if request not authenticated'
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class RequestFailIfNotAuthenticatedTest {

	private Map<String, String> testData = new HashMap<>();

	@BeforeEach
	public void setUp() throws IOException {
		String path = "src" + FileSystems.getDefault().getSeparator() + "test" + FileSystems.getDefault().getSeparator()
				+ "java" + FileSystems.getDefault().getSeparator() + "com" + FileSystems.getDefault().getSeparator()
				+ "learnk8s" + FileSystems.getDefault().getSeparator() + "RoostTest"
				+ FileSystems.getDefault().getSeparator() + "RequestFailIfNotAuthenticatedTest.csv";
		BufferedReader reader = new BufferedReader(new FileReader(path));
		String headersLine = reader.readLine(); // Read the header line
		String line;
		while ((line = reader.readLine()) != null) {
			if (!line.trim().isEmpty()) {
				String[] data = line.split("\\^\\|\\^");
				testData.put("METHOD", data[0]);
				testData.put("URL", data[1]);
				testData.put("REQ_HEADERS", data[2]);
				testData.put("REQ_BODY", data[3]);
				testData.put("RESPONSE_CODE", data[4]);
				testData.put("RESPONSE_BODY", data[5]);
				break; // Assuming one line of test data for this example
			}
		}
		reader.close();
	}

	@Test
	public void requestMustFailIfNotAuthenticated() {
		// Given the base URL is "http://localhost:8080"
		RestAssured.baseURI = "http://localhost:8080";

		// Request must fail with error if request not authenticated
		// Given id of recipient as 09237482347 in path parameter
		// And size=43 and offset=22 in request query
		// When the client sends a GET request to endpoint
		// "/recipients/persons/{id}/registrations"
		// When authentication token is not sent in request
		Response response = given().pathParam("id", "09237482347")
			.queryParam("size", "43")
			.queryParam("offset", "22")
			.when()
			.get(testData.get("URL"));

		// Then for unauthenticated request having status code 401, Verify that headers
		// have api-version
		// And response body must have appropriate error schema
		response.then()
			.statusCode(Integer.parseInt(testData.get("RESPONSE_CODE")))
			.contentType(ContentType.JSON)
			.header("api-version", notNullValue())
			.body("error", equalTo("Unauthenticated"))
			.body("description", equalTo("Authentication token is missing"));
	}

}
