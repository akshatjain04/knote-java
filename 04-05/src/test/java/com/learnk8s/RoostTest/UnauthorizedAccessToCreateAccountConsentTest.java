// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=70f50535cf
ROOST_METHOD_SIG_HASH=da6e5a0f83

 ########## Scenario ########## 

{
  feature: 'Feature: Account Consent Setup',
  background: 'Background:\r\n' +
    "        * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')\r\n" +
    '        * url urlBase\r\n' +
    "        * def authToken = karate.properties['AUTH_TOKEN']",
  rule: null,
  scenario: {
    title: 'Scenario: Unauthorized access to create account consent',
    steps: "Given path '/aisp/account-consents'\r\n" +
      "And header Authorization = 'Bearer invalid-token'\r\n" +
      "And header Content-Type = 'application/json'\r\n" +
      'And request\r\n' +
      '            """\r\n' +
      '            {\r\n' +
      '                "data": {\r\n' +
      '                    "permissions": [\r\n' +
      '                        "ReadAccountBalance"\r\n' +
      '                    ]\r\n' +
      '                }\r\n' +
      '            }\r\n' +
      '            """\r\n' +
      'When method POST\r',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class UnauthorizedAccessToCreateAccountConsentTest {

    private final String payloadFilePath = "src" + FileSystems.getDefault().getSeparator() +
            "test" + FileSystems.getDefault().getSeparator() +
            "java" + FileSystems.getDefault().getSeparator() +
            "com" + FileSystems.getDefault().getSeparator() +
            "learnk8s" + FileSystems.getDefault().getSeparator() +
            "RoostTest" + FileSystems.getDefault().getSeparator() +
            "UnauthorizedAccessToCreateAccountConsentTest.csv";

    private BufferedReader reader;

    @BeforeEach
    public void setUp() throws IOException {
        reader = new BufferedReader(new FileReader(payloadFilePath));
        // Skip the first line as it contains the headers
        reader.readLine();
    }

    @Test
    public void testUnauthorizedAccessToCreateAccountConsent() throws IOException {
        String line;
        while ((line = reader.readLine()) != null) {
            // Skip empty lines
            if (line.trim().isEmpty()) continue;

            String[] payloadData = line.split("\\^\\|\\^");
            String method = payloadData[0];
            String url = payloadData[1];
            Map<String, String> headers = new JSONObject(payloadData[2]).toMap();
            JSONObject requestBody = new JSONObject(payloadData[3]);
            int expectedStatusCode = Integer.parseInt(payloadData[4]);
            JSONObject expectedResponseBody = new JSONObject(payloadData[5]);

            RequestSpecification request = RestAssured.given().headers(headers).body(requestBody.toString());

            Response response = request.request(method, url);

            // Asserting the response status code and body
            response.then()
                    .statusCode(expectedStatusCode)
                    .body("id", equalTo(expectedResponseBody.getString("id")))
                    .body("errors[0].code", equalTo(expectedResponseBody.getJSONArray("errors").getJSONObject(0).getString("code")))
                    .body("errors[0].causes", equalTo(expectedResponseBody.getJSONArray("errors").getJSONObject(0).getString("causes")))
                    .body("errors[0].extendedDetails", equalTo(expectedResponseBody.getJSONArray("errors").getJSONObject(0).getJSONObject("extendedDetails")));
        }

        reader.close();
    }
}
