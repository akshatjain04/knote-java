// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=dff35151d7
ROOST_METHOD_SIG_HASH=3a7061432c

 ########## Scenario ########## 

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Create my account \r\n' +
    '    When the client sends a POST request "/accounts" with the accounts_body payload\r\n' +
    '    Then create an account with the specified informatio\r\n' +
    '    And verify the account created using GET request for "/me"',
  title: 'Create my account'
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class CreateMyAccountScenarioTest {

    private static final String CSV_FILE_PATH = "src" + System.getProperty("file.separator") + "test" + System.getProperty("file.separator") + "java" + System.getProperty("file.separator") + "com" + System.getProperty("file.separator") + "learnk8s" + System.getProperty("file.separator") + "RoostTest" + System.getProperty("file.separator") + "CreateMyAccountScenario.csv";
    private Map<String, String> testData;

    @BeforeEach
    public void setup() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH));
        reader.readLine(); // skip headers
        String line;
        testData = new HashMap<>();
        while ((line = reader.readLine()) != null && !line.isEmpty()) {
            String[] data = line.split("\\^\\|\\^");
            testData.put("METHOD", data[0]);
            testData.put("URL", data[1]);
            testData.put("REQ_HEADERS", data[2]);
            testData.put("REQ_BODY", data[3]);
            testData.put("RESPONSE_CODE", data[4]);
            testData.put("RESPONSE_BODY", data[5]);
        }
        reader.close();
        RestAssured.baseURI = "http://localhost:8080";
    }

    @Test
    public void testCreateMyAccount() {
        // Deserialize headers and body
        Map<String, String> headers = testData.get("REQ_HEADERS").isEmpty() ? null : new HashMap<>();
        Map<String, String> body = testData.get("REQ_BODY").isEmpty() ? null : new HashMap<>();
        
        if (headers != null) {
            headers = new HashMap<>(io.restassured.path.json.JsonPath.from(testData.get("REQ_HEADERS")).get());
        }
        if (body != null) {
            body = new HashMap<>(io.restassured.path.json.JsonPath.from(testData.get("REQ_BODY")).get());
        }

        // Perform POST request to create an account
        Response postResponse = given()
                .headers(headers)
                .contentType(ContentType.JSON)
                .body(body)
                .when()
                .post(testData.get("URL"))
                .then()
                .statusCode(Integer.parseInt(testData.get("RESPONSE_CODE")))
                .body("", hasKey("api-version"))
                .body("commit-hash", equalTo(headers.get("commit-hash")))
                .extract()
                .response();

        // Deserialize response headers for verification
        Map<String, String> responseHeaders = new HashMap<>(io.restassured.path.json.JsonPath.from(testData.get("RESPONSE_BODY")).get());

        // Verify the response headers of the POST request
        postResponse.then()
                .header("api-version", responseHeaders.get("api-version"))
                .header("commit-hash", responseHeaders.get("commit-hash"));

        // Perform GET request to verify the account creation
        Response getResponse = given()
                .header("Token", headers.get("Token"))
                .when()
                .get("/me")
                .then()
                .statusCode(200)
                .body("id", notNullValue())
                .body("email", equalTo(body.get("email")))
                .extract()
                .response();

        // Verify the response body of the GET request
        Map<String, Object> expectedResponseBody = new HashMap<>(io.restassured.path.json.JsonPath.from(testData.get("RESPONSE_BODY")).get());
        getResponse.then()
                .body("id", equalTo(expectedResponseBody.get("id")))
                .body("email", equalTo(expectedResponseBody.get("email")))
                .body("createdAt", equalTo(expectedResponseBody.get("createdAt")))
                .body("updatedAt", equalTo(expectedResponseBody.get("updatedAt")))
                .body("api-version", equalTo(expectedResponseBody.get("api-version")));
    }
}
