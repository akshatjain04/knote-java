// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=8a678d19dd
ROOST_METHOD_SIG_HASH=92354c4d7f

 ########## Scenario ########## 

{
  feature: 'Feature: Account Consent Setup',
  background: 'Background:\r\n' +
    "        * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')\r\n" +
    '        * url urlBase\r\n' +
    "        * def authToken = karate.properties['AUTH_TOKEN']",
  rule: null,
  scenario: {
    title: 'Scenario: Create account consent with unsupported media type',
    steps: "Given path '/aisp/account-consents'\r\n" +
      "And header Authorization = 'Bearer ' + authToken\r\n" +
      "And header Content-Type = 'text/plain'\r\n" +
      "And request 'Invalid content type'\r\n" +
      'When method POST\r',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.HashMap;
import java.util.Map;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class CreateAccountConsentWithUnsupportedMediaTypeTest {

    private String authToken;
    private Map<String, String> headers;
    private String requestBody;
    private int expectedStatusCode;
    private String expectedResponseBody;

    @BeforeEach
    public void setUp() throws IOException {
        String pathSeparator = FileSystems.getDefault().getSeparator();
        String payloadFilePath = "src" + pathSeparator + "test" + pathSeparator + "java" + pathSeparator + 
                                 "com" + pathSeparator + "learnk8s" + pathSeparator + "RoostTest" + 
                                 pathSeparator + "CreateAccountConsentWithUnsupportedMediaTypeTest.csv";

        BufferedReader reader = new BufferedReader(new FileReader(payloadFilePath));
        String line = reader.readLine(); // Skip headers
        while ((line = reader.readLine()) != null && !line.trim().isEmpty()) {
            String[] data = line.split("\\^\\|\\^");
            if ("POST".equals(data[0])) {
                authToken = data[2].substring(data[2].indexOf("Bearer ") + 7);
                headers = new HashMap<>();
                headers.put("Content-Type", "text/plain");
                headers.put("Authorization", "Bearer " + authToken);
                requestBody = data[3];
                expectedStatusCode = Integer.parseInt(data[4]);
                expectedResponseBody = data[5];
            }
        }
        reader.close();
    }

    @Test
    public void testCreateAccountConsentWithUnsupportedMediaType() {
        // Scenario: Create account consent with unsupported media type
        RestAssured.baseURI = "http://localhost:4010";

        // Given path '/aisp/account-consents'
        // And header Authorization = 'Bearer ' + authToken
        // And header Content-Type = 'text/plain'
        // And request 'Invalid content type'
        // When method POST
        Response response = given()
                .headers(headers)
                .body(requestBody)
                .when()
                .post("/aisp/account-consents");

        // Then validate the response status code and response body
        response.then()
                .statusCode(expectedStatusCode)
                .contentType(ContentType.JSON)
                .body("id", equalTo("string"))
                .body("errors[0].code", equalTo("string"))
                .body("errors[0].causes", equalTo("string"))
                .body("headers.Content-Type", equalTo("string"))
                .body("headers.x-fapi-interaction-id", equalTo("string"));
    }
}
