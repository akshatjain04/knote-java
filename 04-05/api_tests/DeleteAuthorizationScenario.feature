# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# ROOST_METHOD_HASH=87771cdd6d
# ROOST_METHOD_SIG_HASH=0a68a12aee
# 
#  ########## Scenario ########## 
# 
# {
#   background: 'Given the base URL is "http://localhost:8080"',
#   rule: null,
#   scenario: 'Delete authorization\r\n' +
#     '    Given authorization ID\r\n' +
#     '    When the client sends a DELETE request to "/authorizations/ID"\r\n' +
#     '    Then the response status code should be 200 for a successful delete\r\n' +
#     '    And the authorizations should not appear in GET request for "/authorizations"',
#   title: 'Delete authorization'
# }
# 

# ********RoostGPT********
Feature: Delete authorization

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def authToken = 'your_auth_token' # Replace with actual auth token

Scenario: Successful deletion of an authorization
  # Delete an existing authorization and verify successful deletion
  Given path '/authorizations/', '123e4567-e89b-12d3-a456-426614174000'
  And header Token = authToken
  When method delete
  Then status 200
  And assert responseHeaders['api-version'] == '1.0.0'
  # Verify the deleted authorization does not appear in GET request
  Given path '/authorizations'
  And header Token = authToken
  When method get
  Then status 200
  And assert responseHeaders['api-version'] == '1.0.0'
  And match response.authorizations contains '#not({ id: "123e4567-e89b-12d3-a456-426614174000" })'

Scenario: Attempt to delete a non-existing authorization
  # Attempt to delete a non-existing authorization and verify the failure
  Given path '/authorizations/', 'non-existing-id'
  And header Token = authToken
  When method delete
  Then status 400
  And assert responseHeaders['api-version'] == '1.0.0'
